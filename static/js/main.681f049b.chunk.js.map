{"version":3,"sources":["apollo/apollo-client.js","reducers/cards.reducer.js","graphql/search-query.js","context/cards-context.js","components/cards/CardItem.component.jsx","components/cards/CardList.component.jsx","components/search/SearchResult.component.jsx","components/search/SearchList.component.jsx","components/search/SearchInput.component.jsx","components/search/LoadingPage.component.jsx","components/GitHubFinderApp/GitHubFinderApp.component.jsx","index.js"],"names":["client","ApolloClient","link","createHttpLink","uri","headers","Authorization","cache","InMemoryCache","cardsReducer","state","action","type","cards","card","filter","id","CardsContext","React","createContext","CardItem","repository","dispatch","useContext","className","onClick","href","owner","url","src","avatarUrl","alt","login","name","forkCount","stargazers","totalCount","watchers","CardList","length","map","idx","key","SearchResult","node","SearchList","data","search","edges","SearchInput","setSearchRequest","useState","searchInput","setSearchInput","onSubmit","e","preventDefault","placeholder","value","onChange","target","LoadingPage","GitHubFinderApp","useReducer","searchRequest","searchQuery","gql","useQuery","skip","loading","error","useEffect","cardsData","JSON","parse","localStorage","getItem","setItem","stringify","Provider","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.681f049b.chunk.js","sourcesContent":["import { ApolloClient } from 'apollo-client'\r\nimport { createHttpLink } from 'apollo-link-http'\r\nimport { InMemoryCache } from 'apollo-cache-inmemory'\r\n\r\nconst TOKEN = '5a5d5a17c31f627ee5ee320aefc23f62625bd663';\r\n\r\nconst client = new ApolloClient({\r\n  link: createHttpLink({ \r\n    uri: 'https://api.github.com/graphql',\r\n    headers: {\r\n      Authorization: `token ${TOKEN}`\r\n    }\r\n  }),\r\n  cache: new InMemoryCache()\r\n})\r\n\r\nexport { client as default }","const cardsReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'POPULATE_CARDS':\r\n      return action.cards\r\n    case 'ADD_CARD':\r\n      return [\r\n        ...state,\r\n        action.card \r\n      ]\r\n    case 'REMOVE_CARD':\r\n      return state.filter((card) => card.id !== action.id)\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport { cardsReducer as default }","import { gql } from 'apollo-boost';\r\n\r\n\r\nconst REPOSITORIES_SEARCH = (search) => {\r\n  return (\r\n    gql`{\r\n      search(query: \"${search}\", type: REPOSITORY, first: 5) {\r\n        repositoryCount\r\n        edges {\r\n          node {\r\n            ... on Repository {\r\n              id\r\n              name\r\n              forkCount\r\n              owner {\r\n                login\r\n                avatarUrl\r\n                url\r\n              }\r\n              stargazers {\r\n                totalCount\r\n              }\r\n              url\r\n              watchers {\r\n                totalCount\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `\r\n  )\r\n} \r\n\r\nexport { REPOSITORIES_SEARCH as default }","import React from 'react'\r\n\r\nconst CardsContext = React.createContext()\r\n\r\nexport { CardsContext as default }","import React, { useContext } from 'react'\r\nimport CardsContext from '../../context/cards-context'\r\n\r\nconst CardItem = ({ repository }) => {\r\n  const { dispatch } = useContext(CardsContext)\r\n  \r\n  // Removing repository card from CardList component\r\n  const removeCard = (id) => {\r\n    dispatch({\r\n      type: 'REMOVE_CARD',\r\n      id: id\r\n    })\r\n  }\r\n  return (\r\n    <div className=\"card-item\">\r\n      <button className=\"button button--remove\" onClick={() => removeCard(repository.id)}>X</button>\r\n      <a href={repository.owner.url}>\r\n        <div className='card-item__user'>\r\n          <img src={repository.owner.avatarUrl} alt={repository.owner.login} />\r\n          <h5 className=\"list-item__title\">{repository.owner.login}</h5>\r\n        </div>\r\n      </a>\r\n      <div className=\"card-item__repository\">\r\n        <a href={repository.url}>\r\n          <h3>{repository.name}</h3>\r\n        </a>\r\n        <h5>Forks: {repository.forkCount}</h5>\r\n        <h5>Stargazers: {repository.stargazers.totalCount}</h5>\r\n        <h5>Watchers: {repository.watchers.totalCount}</h5>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CardItem\r\n","import React, { useContext } from 'react'\r\nimport CardItem from './CardItem.component'\r\nimport CardsContext from '../../context/cards-context'\r\n\r\nconst CardList = () => {\r\n  const { cards } = useContext(CardsContext)\r\n\r\n  return (cards.length > 0) && (\r\n    <div className=\"content-container\">\r\n      <div className=\"card-list-container\">\r\n        <h2>favorite repositories</h2>\r\n        <div className=\"card-list\">\r\n        {\r\n          cards.map((repository,idx) => (\r\n            <CardItem \r\n            key={`${repository.id}-${idx}`}\r\n            repository={repository}\r\n            />\r\n            ))\r\n          }\r\n          </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport { CardList as default }\r\n","import React, { useContext } from 'react'\r\nimport CardsContext from '../../context/cards-context'\r\n\r\nconst SearchResult = ({ repository }) => {\r\n  const { dispatch } = useContext(CardsContext)\r\n\r\n  // Adding repository card to CardList component\r\n  const addCard = (node) => {\r\n    dispatch({\r\n      type: 'ADD_CARD',\r\n      card: node\r\n    })\r\n  }\r\n  return (\r\n    <div className=\"list-item\">\r\n      <div>\r\n        <h3 className=\"list-item__title\">\r\n          <a href={repository.node.url}>{repository.node.name} </a> \r\n          <span className=\"list-item__sub-title\">\r\n           by {repository.node.owner.login}\r\n          </span> \r\n        </h3>\r\n        <span className=\"list-item__sub-title\">\r\n        â˜…{repository.node.stargazers.totalCount}\r\n        </span>\r\n      </div>\r\n      <button \r\n        className=\"button button--secondary\" \r\n        onClick={() => addCard(repository.node)}\r\n      >+</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport { SearchResult as default }\r\n","import React, { useContext } from 'react'\r\nimport SearchResult from './SearchResult.component.jsx'\r\nimport CardsContext from '../../context/cards-context'\r\n\r\nconst SearchList = () => {\r\n  const { data } = useContext(CardsContext)\r\n\r\n  return (\r\n      <div className=\"content-container\">\r\n        <div className=\"list-body\">\r\n          {data && data.search.edges.map((repository) => (\r\n            <SearchResult \r\n              key={repository.node.id} \r\n              repository={repository} \r\n            />  \r\n          )\r\n        )\r\n          }\r\n        </div>\r\n      </div>\r\n  ) \r\n}\r\n\r\nexport default SearchList\r\n","import React, { useState, useContext } from 'react'\r\nimport CardsContext from '../../context/cards-context'\r\n\r\nconst SearchInput = () => {\r\n  const { setSearchRequest } = useContext(CardsContext)\r\n\r\n  // Input search field state\r\n  const [ searchInput, setSearchInput ] = useState(\"\")\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault()\r\n    setSearchRequest(searchInput)\r\n\r\n    // Clear search input value\r\n    setSearchInput(\"\")\r\n  }\r\n\r\n  return (\r\n    <div className=\"content-container\">\r\n      <div className=\"search-input\">\r\n        <div className=\"input-group__item\">\r\n          <form onSubmit={handleSubmit}>\r\n            <input \r\n              className=\"text-input\"\r\n              type=\"text\"\r\n              placeholder=\"Search GitHub repositories\"\r\n              value={searchInput}\r\n              onChange={e => setSearchInput(e.target.value)}\r\n            />\r\n            <button \r\n              type=\"submit\" \r\n              value=\"Search\"\r\n              className=\"button\"\r\n            >\r\n              Search\r\n            </button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport { SearchInput as default }","import React from 'react'\r\n\r\nconst LoadingPage = () => {\r\n  return (\r\n    <div className=\"loader\">\r\n     <img \r\n      className=\"loader__image\" \r\n      alt=\"loading-spinner\" \r\n      src=\"images/loader.gif\" \r\n    />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default LoadingPage\r\n","import React, { useState, useEffect, useReducer } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport cardsReducer from '../../reducers/cards.reducer'\n\nimport REPOSITORIES_SEARCH from '../../graphql/search-query'\nimport CardsContext from '../../context/cards-context'\n\nimport CardList from '../cards/CardList.component'\nimport SearchList from '../search/SearchList.component'\nimport SearchInput from '../search/SearchInput.component'\nimport LoadingPage from '../search/LoadingPage.component'\n\nimport '../../styles/styles.scss'\n\nconst  GitHubFinderApp = () => {\n  // Cards state\n  const [cards, dispatch] = useReducer(cardsReducer, [])\n\n  // Request value we send to query\n  const [ searchRequest, setSearchRequest ] = useState(\"\")\n\n  // Fetching data from github via apollo-client\n  const searchQuery = REPOSITORIES_SEARCH(searchRequest)\n\n  // we should skip the first Query request, after reloading the page\n  const { loading, error, data } = useQuery(searchQuery, { skip: !searchRequest})\n\n  // read cards from localstorage\n  useEffect(() => {\n    const cardsData = JSON.parse(localStorage.getItem('cards'))\n    \n    if (cardsData) {\n      dispatch({ type: 'POPULATE_CARDS', cards: cardsData})\n    }\n  }, [])\n\n  // save cards to localstorage\n  useEffect(() => {\n    localStorage.setItem('cards', JSON.stringify(cards))\n  }, [cards])\n\n  return (\n    <CardsContext.Provider value={{ cards, dispatch, setSearchRequest, data }}>\n      <div>\n          <SearchInput />\n            {loading ? ( <LoadingPage />) : (\n                <SearchList />\n              )}\n            {error && (<p>Error :(</p>)}\n          <CardList />\n      </div>\n    </CardsContext.Provider>\n  );\n}\n\nexport default GitHubFinderApp;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { ApolloProvider } from 'react-apollo'\n\nimport client from './apollo/apollo-client'\nimport GitHubFinderApp from './components/GitHubFinderApp/GitHubFinderApp.component'\n\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <GitHubFinderApp />\n  </ApolloProvider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}